%% STEP 0 -- INIT

clear
close all

step_1 = 1;
step_2 = 1;
saveall = 0;

N_receiver = 3;
Test_for_dfo = 1;
Test_for_y1y2 = 3;
fRS = 806e6;
fUS = 806e6;

SAMPLING_RATE_DFO = 1.92e6;
% num_sample_dfo minimun 1s of samples
fs_y1y2 = 1.920e6;
num_samples_y1y2 = 5.76e6;

index_to_analyze = 1;
methods = {'abs', 'dphase', 'iq'};
                

%% STEP 1 -- LTESS-TRACK
PPM_final = zeros(Test_for_dfo,N_receiver);
PPM2_final = zeros(Test_for_dfo,N_receiver);

if step_1
    addpath('./common/')
    
    RESAMPLE_FACTOR = 60;
    PSS_STEP = 9600;
    SEARCH_WINDOW = 150;
    CORRELATION_FACTOR = 0.1;
    CORRELATION_FACTOR_PREAMBLE = 0.1;
    PREAMBLE=20; % Number of analyzed PSS before start to jump
    FLIP=0; % 0 disabled 1: enabled  (testing purposes)
    POLYNOMIAL_DEGREE=1;
    
    [Z, Z_t] = get_Zadoof();
    
    for index1 = 1:N_receiver
            
        filename_for_LTESS = sprintf('test/%d_ltess_%d.dat', index1, index_to_analyze);

        capbuf = spec_load(filename_for_LTESS);
        chunk = capbuf(1:SAMPLING_RATE_DFO*1);
        [PPM,PSS_percent,data_Z,Y_Z,p_Z,PPM2] = getDrift(chunk,SAMPLING_RATE_DFO, Z, Z_t, PREAMBLE, ...
            PSS_STEP, SEARCH_WINDOW, CORRELATION_FACTOR, RESAMPLE_FACTOR, FLIP, POLYNOMIAL_DEGREE);
        fprintf('Zadoof adaptation --> PPM: %f [%f] - PSS detected: %f\n', PPM, PPM2, PSS_percent)
        T_s = 1/SAMPLING_RATE_DFO;
        delta_f=(PPM*1e-6)*806e6;
        Z_t_rotated = {};
        Z_t_rotated{1} = Z_t{1}.*exp(-1i*2*pi*T_s*delta_f*(1:length(Z_t{1}))');
        Z_t_rotated{2} = Z_t{2}.*exp(-1i*2*pi*T_s*delta_f*(1:length(Z_t{2}))');
        Z_t_rotated{3} = Z_t{3}.*exp(-1i*2*pi*T_s*delta_f*(1:length(Z_t{3}))');
        [PPM,PSS_percent,data,Y,p,PPM2, th_learned, Z_sequence, last, p_loc20 ] = getDrift(chunk,SAMPLING_RATE_DFO, Z, Z_t_rotated, ...
            PREAMBLE, PSS_STEP, SEARCH_WINDOW, CORRELATION_FACTOR, RESAMPLE_FACTOR, FLIP, POLYNOMIAL_DEGREE);
        fprintf('Final result --> PPM: %f [%f] - PSS detected: %f\n', PPM, PPM2, PSS_percent)
        PPM_final(index1) = PPM;
        PPM2_final(index1) = PPM2;
    end
    fprintf('<------------------------------------------->\n')
    for index1 = 1:N_receiver
        for index2 = 1:Test_for_dfo
            fprintf('Device %d --> PPM: %f - PPM2: %f\n', index1, PPM_final(index1), PPM2_final(index1))
        end
    end
    fprintf('<------------------------------------------->\n')
    
end

%% STEP 2 -- SIGNAL ANALYSIS

if step_2 == 1
    addpath('./functions/')
    
    alignment = true;
    
    Ts = 1/fs_y1y2;
    t = 0:1/fs_y1y2:((1/fs_y1y2)*(num_samples_y1y2-1));
    alpha = exp(-Ts/0.5e-6);
    r_filt_b = 1-alpha;
    r_filt_a = [1, -alpha];
    r_filt_z = [];
    
    analyzed_devices = nchoosek(1:N_receiver,2);
    
    delay_time_RS = zeros(size(analyzed_devices,1),Test_for_y1y2);
    delay_time_US = zeros(size(analyzed_devices,1),Test_for_y1y2);
    delay_time_RS_ceck = zeros(size(analyzed_devices,1),Test_for_y1y2);
    
    if Test_for_dfo > 1
        PPM_final_def = mean(PPM_final);
    else
        PPM_final_def = PPM_final;
    end
    
    for index1=1:N_receiver
        for index2 = 1:length(methods)
            
            fprintf('Experiment:%d --- Method: %s\n', index1, methods{index2})
            filename_for_corr_1 = sprintf('test/%d_ltess_%d.dat',analyzed_devices(index1,1),index_to_analyze);
            filename_for_corr_2 = sprintf('test/%d_ltess_%d.dat',analyzed_devices(index1,2),index_to_analyze);
            
            r1 = spec_load(filename_for_corr_1);
            r2 = spec_load(filename_for_corr_2);
%             fileID1 = fopen(filename_for_corr_1);
%             fileID2 = fopen(filename_for_corr_2);
%             A = fread(fileID1);
%             B = fread(fileID2);
%             fclose(fileID1);
%             fclose(fileID2);
%             
%             inphase1 = A(1:2:end) -128;
%             quadrature1 = A(2:2:end) -128;
%             inphase2 = B(1:2:end) -128;
%             quadrature2 = B(2:2:end) -128;
%             
%             r1 = (inphase1 + 1i*quadrature1);
            [r1_filt_B,~] = filter(r_filt_b,r_filt_a,r1,r_filt_z);
            r1_filt_B = r1_filt_B - mean(r1_filt_B);
%             r2 = (inphase2 + 1i*quadrature2);
            [r2_filt_B,r_filt_z_A] = filter(r_filt_b,r_filt_a,r2,r_filt_z);
            r2_filt_B = r2_filt_B - mean(r2_filt_B);
            
            index_samples = [10e6 14e6 20.2e6 39.8e6 40.2e6 59.8e6];
%             index_samples = [0.1e6 0.9e6 1.1e6 1.9e6 2.1e6 2.9e6];
            
            % FO correction
            r1_filt_B(1:num_samples_y1y2/3) = r1_filt_B(1:num_samples_y1y2/3).*(exp(-1i*2*pi*t(1:num_samples_y1y2/3)*(-PPM_final_def(analyzed_devices(index1,1)))*(1e-6)*fUS).');
            r2_filt_B(1:num_samples_y1y2/3) = r2_filt_B(1:num_samples_y1y2/3).*(exp(-1i*2*pi*t(1:num_samples_y1y2/3)*(-PPM_final_def(analyzed_devices(index1,2)))*(1e-6)*fUS).');
            r1_filt_B((1+num_samples_y1y2/3):(2*num_samples_y1y2/3)) = r1_filt_B((1+num_samples_y1y2/3):(2*num_samples_y1y2/3)).*(exp(-1i*2*pi*t((1+num_samples_y1y2/3):(2*num_samples_y1y2/3))*(-PPM_final_def(analyzed_devices(index1,1)))*(1e-6)*fRS).');
            r2_filt_B((1+num_samples_y1y2/3):(2*num_samples_y1y2/3)) = r2_filt_B((1+num_samples_y1y2/3):(2*num_samples_y1y2/3)).*(exp(-1i*2*pi*t((1+num_samples_y1y2/3):(2*num_samples_y1y2/3))*(-PPM_final_def(analyzed_devices(index1,2)))*(1e-6)*fRS).');
            r1_filt_B((1+2*num_samples_y1y2/3):end) = r1_filt_B((1+2*num_samples_y1y2/3):end).*(exp(-1i*2*pi*t((1+2*num_samples_y1y2/3):end)*(-PPM_final_def(analyzed_devices(index1,1)))*(1e-6)*fUS).');
            r2_filt_B((1+2*num_samples_y1y2/3):end) = r2_filt_B((1+2*num_samples_y1y2/3):end).*(exp(-1i*2*pi*t((1+2*num_samples_y1y2/3):end)*(-PPM_final_def(analyzed_devices(index1,2)))*(1e-6)*fUS).');
            
            % time correction
            Sampling_vector = 1:numel(r1_filt_B);
            r1_filt_B = interp1(Sampling_vector,r1_filt_B,Sampling_vector*(1+((1e-6)*(PPM_final_def(analyzed_devices(index1,1)))))).';
            r2_filt_B = interp1(Sampling_vector,r2_filt_B,Sampling_vector*(1+((1e-6)*(PPM_final_def(analyzed_devices(index1,2)))))).';
            
            % Upsampling by 20
            r1_filt_B = interp(r1_filt_B, 20);
            r2_filt_B = interp(r2_filt_B, 20);
            
            % first corr -- corr1_reliability = corr_reliability(corr_signal);
            corr_signal = correlate_iq(r1_filt_B(index_samples(1):index_samples(2)), r2_filt_B(index_samples(1):index_samples(2)), methods{index2}, 0);
            [~, idx1] = max(corr_signal);
            delay_time_RS(index1,index2) = idx1 - (index_samples(2)-index_samples(1));
            % time alignment
            if alignment && delay_time_RS(index1,index2) > 0
                r1_alignment = r1_filt_B(delay_time_RS(index1,index2)+1:end);
                r2_alignment = r2_filt_B;
            elseif alignment && delay_time_RS(index1,index2) <= 0
                r1_alignment = r1_filt_B;
                r2_alignment = r2_filt_B(-delay_time_RS(index1,index2)+1:end);
            else
                r1_alignment = r1_filt_B;
                r2_alignment = r2_filt_B;
            end
            
            % second corr
            corr_signal = correlate_iq(r1_alignment(index_samples(3):index_samples(4)), r2_alignment((index_samples(3):index_samples(4))), methods{index2}, 0);
            [~, idx1] = max(corr_signal);
            delay_time_US(index1,index2) = idx1 - (index_samples(4)-index_samples(3));
            
            fprintf('%d %d %d\n',delay_time_RS(index1,index2),delay_time_US(index1,index2),delay_time_RS_ceck(index1,index2))
        end
    end
    
end